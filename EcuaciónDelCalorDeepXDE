import deepxde as dde
import numpy as np
import torch
import matplotlib.pyplot as plt
#Parámetros de la EDP del calor
L = 1
n = 1
alpha = 0.05

#Dominio espaciotemporal
geom = dde.geometry.Interval(0, L)
timedomain = dde.geometry.TimeDomain(0, n)
geomtime = dde.geometry.GeometryXTime(geom, timedomain)

#Definición de la ecuación diferencial
def pde(x, y):
    dy_t = dde.grad.jacobian(y, x, i=0, j=1)
    dy_xx = dde.grad.hessian(y, x, i=0, j=0)
    return dy_t - alpha * dy_xx

# Condiciones de contorno del problema
bc_left = dde.icbc.DirichletBC(geomtime, lambda x: 0, lambda x, on_boundary: on_boundary and np.isclose(x[0], 0))
bc_right = dde.icbc.DirichletBC(geomtime, lambda x: 0, lambda x, on_boundary: on_boundary and np.isclose(x[0], L))

# Condiciones iniciales
ic = dde.icbc.IC(
    geomtime,
    lambda x: np.sin(2 * np.pi * x[:, 0:1]),
    lambda x, on_initial: on_initial,
)

# Hiperparámetros del modelo (ajustable)
data = dde.data.TimePDE(
    geomtime,
    pde,
    [bc_left, bc_right, ic],
    num_domain=2400,
    num_boundary=20,
    num_initial=20,
    num_test=2000,
)
#compilación del modelo
net = dde.nn.FNN([2] + [20] * 4 + [1], "tanh", "Glorot normal")
model = dde.Model(data, net)
model.compile("adam", lr=1e-3)
losshistory, train_state = model.train(iterations=25000)
